apiVersion: v1
kind: Template
metadata:
  name: demo-slide-deck
  annotations:
    iconClass: icon-jenkins
    description: "A template that will provision ephemeral Jenkins, the NodeJS Agent ConfigMap, and a BuildConfig pipeline that will deploy the simple application from https://github.com/kenmoini/demo-app-slide-deck"
    displayName: "Workshop Demo - Slide Deck"
    openshift.io/display-name: "Workshop Demo - Slide Deck"
objects:

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: integrated-cicd-pipeline
      role: jenkins-slave
    name: jenkins-slaves-nodejs
  data:
    nodejs-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>nodejs</name>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>nodejs</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes />
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>registry.access.redhat.com/openshift3/jenkins-agent-nodejs-8-rhel7</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu>200m</resourceRequestCpu>
            <resourceRequestMemory>512Mi</resourceRequestMemory>
            <resourceLimitCpu>2</resourceLimitCpu>
            <resourceLimitMemory>4Gi</resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>

- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: site-demo-app-slide-deck
      name: site-demo-app-slide-deck-cicd-pipeline
      purpose: cicd-pipeline
    name: site-demo-app-slide-deck-pipeline
  spec:
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: PROJECT_NAME
            value: site-demo-app-slide-deck
        jenkinsfile: |-
          def version
          pipeline {
            agent {
              label 'nodejs'
            }
            options {
              timeout(time: 45, unit: 'MINUTES') 
            }
            stages {
              stage('Get source') {
                steps {
                  git branch: 'master', url: 'https://github.com/kenmoini/demo-app-slide-deck.git'
                }
              }
              stage('Get version from package.json') {
                steps {
                    script {
                      version = sh (
                          script: "cat package.json | grep version | head -1 | awk -F: '{ print \$2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]'",
                          returnStdout: true
                      )
                      echo "${version}"
                    }
                }
              }
              stage('Install packages') {
                steps {
                  sh "npm install"
                  }
                }
              stage('Build site') {
                steps {
                  sh "npm run build"
                }
              }
              stage('Run tests?') {
                steps {
                  sh "npm run test"
                }
              }
              stage('Create Image Builder') {
                  when {
                    expression {
                      openshift.withCluster() {
                        openshift.withProject() {
                          return !openshift.selector("bc", "site-demo-app-slide-deck").exists();
                        }
                      }
                    }
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          openshift.newBuild("--name=site-demo-app-slide-deck", "--image-stream=nodejs:8", "--binary=true")
                        }
                      }
                    }
                  }
                }
                
                stage('Build Image') {
                  steps {
                    sh "rm -rf oc-builds && mkdir -p oc-builds"
                    sh "tar --exclude='./node_modules' --exclude='./.git' --exclude='./oc-builds' -zcf oc-builds/build.tar.gz ."
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          openshift.selector("bc", "site-demo-app-slide-deck").startBuild("--from-archive=oc-builds/build.tar.gz", "--wait=true")
                        }
                      }
                    }
                  }
                }
  
                stage('Tag Image with current version') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          openshift.tag("site-demo-app-slide-deckTYPO:latest", "site-demo-app-slide-deck:${version}")
                        }
                      }
                    }
                  }
                }
  
                stage('Deploy Application') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          if (openshift.selector('dc', 'site-demo-app-slide-deck').exists()) {
                            openshift.selector('dc', 'site-demo-app-slide-deck').delete()
                          }
                          if (openshift.selector('svc', 'site-demo-app-slide-deck').exists()) {
                            openshift.selector('svc', 'site-demo-app-slide-deck').delete()
                          }
                          if (openshift.selector('route', 'site-demo-app-slide-deck').exists()) {
                            openshift.selector('route', 'site-demo-app-slide-deck').delete()
                          }
                          openshift.newApp("site-demo-app-slide-deck:${version}").narrow("svc").expose()
                        }
                      }
                    }
                  }
                }
              }
            }
      type: JenkinsPipeline
